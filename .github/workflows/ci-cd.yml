name: 🧪 ConnectSpace CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing
  backend-test  # Cross-browser Testing (temporarily disabled for CI stability)
  # cross-browser-tests:
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests, frontend-tests]
  #   
  #   strategy:
  #     matrix:
  #       browser: [chromium, firefox, webkit]runs-on: ubuntu-latest
    
    ser    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: � Install backend dependencies
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 🔧 Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: 🧪 Run backend linting
      run: |
        cd backend
        npm run lint:ci

    - name: 🧪 Run backend CI tests
      run: |
        cd backend
        npm run test:ci
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key

    - name: 📊 Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🔧 Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: 🧪 Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: 🧪 Run frontend unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: 🏗️ Build frontend
      run: |
        cd frontend
        npm run build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  # End-to-End Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 🔧 Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🚀 Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://root:password@localhost:27017/connectspace-test?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        PORT: 5000

    - name: 🚀 Build and serve frontend
      run: |
        cd frontend
        npm run build
        npx serve -s build -p 3000 &
        sleep 10
      env:
        REACT_APP_API_URL: http://localhost:5000/api

    - name: 🧪 Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: frontend
        wait-on: 'http://localhost:3000, http://localhost:5000/api/health'
        wait-on-timeout: 120
        browser: chrome
        record: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

  # Cross-Browser Testing (temporarily disabled for CI stability)
  # cross-browser-tests:
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests, frontend-tests]
  #   
  #   strategy:
  #     matrix:
  #       browser: [chromium, firefox, webkit]
  #   
  #   steps:
  #   - name: 📥 Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: 📦 Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #
  #   - name: 🔧 Install dependencies
  #     run: |
  #       cd frontend
  #       npm ci
  #       npx playwright install ${{ matrix.browser }}
  #
  #   - name: 🚀 Start frontend server
  #     run: |
  #       cd frontend
  #       npm start &
  #       sleep 30
  #
  #   - name: 🧪 Run Playwright tests
  #     run: |
  #       cd frontend
  #       npx playwright test --project=${{ matrix.browser }}
  #
  #   - name: 📊 Upload test results
  #     uses: actions/upload-artifact@v4
  #     if: failure()
  #     with:
  #       name: playwright-report-${{ matrix.browser }}
  #       path: frontend/playwright-report

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: � Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: 🔧 Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: �🔒 Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate

    - name: 🔒 Run npm audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: 🔒 Run security linting
      run: |
        cd backend
        npm run lint:ci
        cd ../frontend
        npm run lint

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

    - name: 🚀 Serve built frontend
      run: |
        cd frontend
        npx serve -s build -p 3000 &
        sleep 10

    - name: ⚡ Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun --collect.staticDistDir=frontend/build
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Load Testing (temporarily disabled for CI stability)
  # load-tests:
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   services:
  #     mongodb:
  #       image: mongo:5.0
  #       ports:
  #         - 27017:27017
  #   
  #   steps:
  #   - name: 📥 Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: 📦 Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #
  #   - name: 🔧 Install backend dependencies
  #     run: |
  #       cd backend
  #       npm ci

  #   - name: 🚀 Start backend server
  #     run: |
  #       cd backend
  #       npm start &
  #       sleep 10
  #     env:
  #       NODE_ENV: test
  #       MONGODB_URI: mongodb://localhost:27017/connectspace-test
  #       JWT_SECRET: test-jwt-secret-key
  #       PORT: 5000
  #
  #   - name: 🚀 Run load tests
  #     run: |
  #       cd backend
  #       npm install -g artillery
  #       npm run test:load

  # Code Quality (Disabled - requires SONAR_TOKEN setup)
  # code-quality:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: 📥 Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: 📦 Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #
  #   - name: 🔧 Install dependencies
  #     run: |
  #       cd backend && npm ci
  #       cd ../frontend && npm ci
  #
  #   - name: 🔍 Run SonarCloud analysis
  #     uses: SonarSource/sonarcloud-github-action@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deployment (Production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-audit, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production..."
        # Add deployment commands here
        # For example: Vercel, Netlify, AWS, etc.

    - name: 📊 Post-deployment tests
      run: |
        echo "🧪 Running post-deployment smoke tests..."
        # Add smoke test commands here

    - name: 📢 Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

# Workflow completion notification
  notify-completion:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, cross-browser-tests, security-audit, performance-tests]
    if: always()
    
    steps:
    - name: 📊 Generate test report
      run: |
        echo "🧪 ConnectSpace CI/CD Pipeline Completed"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Cross-Browser Tests: ${{ needs.cross-browser-tests.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        # Code Quality check disabled (requires SonarCloud setup)

    - name: 📢 Notify team
      if: failure()
      run: |
        echo "❌ Pipeline failed - team notification would be sent here"
        # Add team notification logic