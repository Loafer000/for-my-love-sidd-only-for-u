{"ast":null,"code":"import _objectSpread from\"D:/connectspace/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useCallback}from'react';import{propertyAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const PropertyContext=/*#__PURE__*/createContext();const propertyReducer=(state,action)=>{switch(action.type){case'SET_PROPERTIES':return _objectSpread(_objectSpread({},state),{},{properties:action.payload,loading:false});case'SET_PROPERTY':return _objectSpread(_objectSpread({},state),{},{currentProperty:action.payload,loading:false});case'SET_FILTERS':return _objectSpread(_objectSpread({},state),{},{filters:_objectSpread(_objectSpread({},state.filters),action.payload)});case'SET_SEARCH_RESULTS':return _objectSpread(_objectSpread({},state),{},{searchResults:action.payload,loading:false});case'SET_LOADING':return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case'SET_ERROR':return _objectSpread(_objectSpread({},state),{},{error:action.payload,loading:false});case'ADD_FAVORITE':return _objectSpread(_objectSpread({},state),{},{favorites:[...state.favorites,action.payload]});case'REMOVE_FAVORITE':return _objectSpread(_objectSpread({},state),{},{favorites:state.favorites.filter(id=>id!==action.payload)});case'ADD_PROPERTY':return _objectSpread(_objectSpread({},state),{},{properties:[...state.properties,action.payload],loading:false});default:return state;}};const initialState={properties:[],currentProperty:null,searchResults:[],favorites:[],filters:{location:'',priceRange:{min:0,max:10000},propertyType:'',bedrooms:'',bathrooms:'',amenities:[]},loading:false,error:null};// Production-ready context - no mock data\nexport const PropertyProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(propertyReducer,initialState);const searchProperties=useCallback(async searchParams=>{dispatch({type:'SET_LOADING',payload:true});try{// Build query parameters for backend search API\nconst queryParams={};// Use location as both city filter and general search query\nif(searchParams.location){queryParams.city=searchParams.location;// For city-specific search\nqueryParams.q=searchParams.location;// For general text search\n}if(searchParams.propertyType)queryParams.propertyType=searchParams.propertyType;if(searchParams.minPrice)queryParams.minRent=searchParams.minPrice;if(searchParams.maxPrice)queryParams.maxRent=searchParams.maxPrice;if(searchParams.bedrooms)queryParams.bedrooms=searchParams.bedrooms;if(searchParams.capacity)queryParams.bedrooms=searchParams.capacity;// Call backend search API\nconst response=await propertyAPI.searchProperties(queryParams);if(response.success){dispatch({type:'SET_SEARCH_RESULTS',payload:response.data.properties});}else{throw new Error(response.message||'Failed to search properties');}}catch(error){console.error('Search properties error:',error);dispatch({type:'SET_ERROR',payload:error.message});// Fallback to empty results for production - no mock data\nconsole.warn('API search failed, using empty results. Ensure backend is running.');// Return empty results when API fails\ndispatch({type:'SET_SEARCH_RESULTS',payload:[]});}},[]);const getPropertyById=useCallback(async id=>{dispatch({type:'SET_LOADING',payload:true});try{// Try backend API first\nconst response=await propertyAPI.getProperty(id);if(response.success){dispatch({type:'SET_PROPERTY',payload:response.data.property});}else{throw new Error(response.message||'Property not found');}}catch(error){console.error('Get property error:',error);// No fallback data for production\ndispatch({type:'SET_ERROR',payload:'Property not found'});}},[]);const addProperty=useCallback(async propertyData=>{dispatch({type:'SET_LOADING',payload:true});try{// API call would go here\nconst newProperty=_objectSpread(_objectSpread({},propertyData),{},{id:Date.now().toString(),createdAt:new Date().toISOString(),status:'available',landlord:{name:'Current User',verified:true,rating:4.5},reviews:[]});setTimeout(()=>{dispatch({type:'ADD_PROPERTY',payload:newProperty});},1000);return{success:true,property:newProperty};}catch(error){dispatch({type:'SET_ERROR',payload:error.message});return{success:false,error:error.message};}},[]);const toggleFavorite=useCallback(propertyId=>{if(state.favorites.includes(propertyId)){dispatch({type:'REMOVE_FAVORITE',payload:propertyId});}else{dispatch({type:'ADD_FAVORITE',payload:propertyId});}},[state.favorites]);const setFilters=useCallback(newFilters=>{dispatch({type:'SET_FILTERS',payload:newFilters});},[]);const value=_objectSpread(_objectSpread({},state),{},{searchProperties,getPropertyById,addProperty,toggleFavorite,setFilters});return/*#__PURE__*/_jsx(PropertyContext.Provider,{value:value,children:children});};export const useProperty=()=>{const context=useContext(PropertyContext);if(!context){throw new Error('useProperty must be used within a PropertyProvider');}return context;};export default PropertyContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","propertyAPI","jsx","_jsx","PropertyContext","propertyReducer","state","action","type","_objectSpread","properties","payload","loading","currentProperty","filters","searchResults","error","favorites","filter","id","initialState","location","priceRange","min","max","propertyType","bedrooms","bathrooms","amenities","PropertyProvider","_ref","children","dispatch","searchProperties","searchParams","queryParams","city","q","minPrice","minRent","maxPrice","maxRent","capacity","response","success","data","Error","message","console","warn","getPropertyById","getProperty","property","addProperty","propertyData","newProperty","Date","now","toString","createdAt","toISOString","status","landlord","name","verified","rating","reviews","setTimeout","toggleFavorite","propertyId","includes","setFilters","newFilters","value","Provider","useProperty","context"],"sources":["D:/connectspace/frontend/src/contexts/PropertyContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useCallback } from 'react';\r\nimport { propertyAPI } from '../services/api';\r\n\r\nconst PropertyContext = createContext();\r\n\r\nconst propertyReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_PROPERTIES':\r\n      return {\r\n        ...state,\r\n        properties: action.payload,\r\n        loading: false\r\n      };\r\n    case 'SET_PROPERTY':\r\n      return {\r\n        ...state,\r\n        currentProperty: action.payload,\r\n        loading: false\r\n      };\r\n    case 'SET_FILTERS':\r\n      return {\r\n        ...state,\r\n        filters: { ...state.filters, ...action.payload }\r\n      };\r\n    case 'SET_SEARCH_RESULTS':\r\n      return {\r\n        ...state,\r\n        searchResults: action.payload,\r\n        loading: false\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false\r\n      };\r\n    case 'ADD_FAVORITE':\r\n      return {\r\n        ...state,\r\n        favorites: [...state.favorites, action.payload]\r\n      };\r\n    case 'REMOVE_FAVORITE':\r\n      return {\r\n        ...state,\r\n        favorites: state.favorites.filter(id => id !== action.payload)\r\n      };\r\n    case 'ADD_PROPERTY':\r\n      return {\r\n        ...state,\r\n        properties: [...state.properties, action.payload],\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  properties: [],\r\n  currentProperty: null,\r\n  searchResults: [],\r\n  favorites: [],\r\n  filters: {\r\n    location: '',\r\n    priceRange: { min: 0, max: 10000 },\r\n    propertyType: '',\r\n    bedrooms: '',\r\n    bathrooms: '',\r\n    amenities: []\r\n  },\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// Production-ready context - no mock data\r\n\r\nexport const PropertyProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(propertyReducer, initialState);\r\n\r\n  const searchProperties = useCallback(async (searchParams) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    try {\r\n      // Build query parameters for backend search API\r\n      const queryParams = {};\r\n      \r\n      // Use location as both city filter and general search query\r\n      if (searchParams.location) {\r\n        queryParams.city = searchParams.location;  // For city-specific search\r\n        queryParams.q = searchParams.location;     // For general text search\r\n      }\r\n      \r\n      if (searchParams.propertyType) queryParams.propertyType = searchParams.propertyType;\r\n      if (searchParams.minPrice) queryParams.minRent = searchParams.minPrice;\r\n      if (searchParams.maxPrice) queryParams.maxRent = searchParams.maxPrice;\r\n      if (searchParams.bedrooms) queryParams.bedrooms = searchParams.bedrooms;\r\n      if (searchParams.capacity) queryParams.bedrooms = searchParams.capacity;\r\n\r\n      // Call backend search API\r\n      const response = await propertyAPI.searchProperties(queryParams);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: 'SET_SEARCH_RESULTS', payload: response.data.properties });\r\n      } else {\r\n        throw new Error(response.message || 'Failed to search properties');\r\n      }\r\n    } catch (error) {\r\n      console.error('Search properties error:', error);\r\n      dispatch({ type: 'SET_ERROR', payload: error.message });\r\n      \r\n      // Fallback to empty results for production - no mock data\r\n      console.warn('API search failed, using empty results. Ensure backend is running.');\r\n      \r\n      // Return empty results when API fails\r\n      dispatch({ \r\n        type: 'SET_SEARCH_RESULTS', \r\n        payload: [] \r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const getPropertyById = useCallback(async (id) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    try {\r\n      // Try backend API first\r\n      const response = await propertyAPI.getProperty(id);\r\n      if (response.success) {\r\n        dispatch({ type: 'SET_PROPERTY', payload: response.data.property });\r\n      } else {\r\n        throw new Error(response.message || 'Property not found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Get property error:', error);\r\n      // No fallback data for production\r\n      dispatch({ type: 'SET_ERROR', payload: 'Property not found' });\r\n    }\r\n  }, []);\r\n\r\n  const addProperty = useCallback(async (propertyData) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    try {\r\n      // API call would go here\r\n      const newProperty = {\r\n        ...propertyData,\r\n        id: Date.now().toString(),\r\n        createdAt: new Date().toISOString(),\r\n        status: 'available',\r\n        landlord: {\r\n          name: 'Current User',\r\n          verified: true,\r\n          rating: 4.5\r\n        },\r\n        reviews: []\r\n      };\r\n      \r\n      setTimeout(() => {\r\n        dispatch({ type: 'ADD_PROPERTY', payload: newProperty });\r\n      }, 1000);\r\n      \r\n      return { success: true, property: newProperty };\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message });\r\n      return { success: false, error: error.message };\r\n    }\r\n  }, []);\r\n\r\n  const toggleFavorite = useCallback((propertyId) => {\r\n    if (state.favorites.includes(propertyId)) {\r\n      dispatch({ type: 'REMOVE_FAVORITE', payload: propertyId });\r\n    } else {\r\n      dispatch({ type: 'ADD_FAVORITE', payload: propertyId });\r\n    }\r\n  }, [state.favorites]);\r\n\r\n  const setFilters = useCallback((newFilters) => {\r\n    dispatch({ type: 'SET_FILTERS', payload: newFilters });\r\n  }, []);\r\n\r\n  const value = {\r\n    ...state,\r\n    searchProperties,\r\n    getPropertyById,\r\n    addProperty,\r\n    toggleFavorite,\r\n    setFilters\r\n  };\r\n\r\n  return (\r\n    <PropertyContext.Provider value={value}>\r\n      {children}\r\n    </PropertyContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProperty = () => {\r\n  const context = useContext(PropertyContext);\r\n  if (!context) {\r\n    throw new Error('useProperty must be used within a PropertyProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default PropertyContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}